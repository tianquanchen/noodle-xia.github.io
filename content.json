[{"title":"vue-cli多页面脚手架","date":"2017-03-20T13:24:42.000Z","path":"2017/03/20/My-New-Post/","text":"学习使用vue-cli多页面脚手架 关于vue-cliVue-cli是vue官方提供的一个命令行工具（vue-cli），可用于快速搭建大型单页应用。（之前体验学习vue.js一段时间，慢慢开始接触使用vue-cli多页面脚手架）。帮助你快速开始一个vue项目，其实其本质就是给你一套文件结构，包含基础的依赖库，你只需要npm install一下就可以安装。让你不需要为编译或其他琐碎的事情而浪费时间，这并不会限制到你的发挥。（看到有人好像是这么解释的，很赞同这个答案） 学习vue之旅相关学习博客链接:Vue2.0新手完全填坑攻略—从环境搭建到发布 使用方法12345678# install dependenciesnpm install# serve with hot reload at localhost:8080/module/index.htmlnpm run dev //运行# build for production with minificationnpm run build //打包 输入完命令npm run dev会自动启动浏览器，自动启动浏览器就会看到vue图标的界面了 如 npm run build是项目打包命令，运行这个命令后会生成可以进行上线的打包文件，这时候打开根目录（dist）下的index.html就可以直接看到你的项目效果了。在使用 atom 编辑时进一步认识atom编辑器与subline的区别，另外在打开IDE这一项时，使用atom打开项目需要安装 Vue 语法高亮的插件，使项目代码可读性更好。添加插件方法：在atom编辑页面选项栏中点击Packages，选择Settings View——&gt; Install Packages/Themes,然后搜索需要添加的插件，如图： 随笔哈哈 之前看博客教程里提到有需要填的坑，自己没在意，直接看下面的了，现在果然跳进去了，当自己试着打包别人做好的项目时，出现cannot find module &#39;clean-webpack-plugin&#39;里面确实提醒了少哪个插件下哪个。。哈哈慢慢来。。加油！ 下一步通过学习vue-cli多页面脚手架和别人的demo 尝试搭建自己的多页面个人主页","tags":[{"name":"vue","slug":"vue","permalink":"https:noodle-xia.github.io/blog/tags/vue/"},{"name":"前端框架","slug":"前端框架","permalink":"https:noodle-xia.github.io/blog/tags/前端框架/"},{"name":"随笔","slug":"随笔","permalink":"https:noodle-xia.github.io/blog/tags/随笔/"}]},{"title":"vue学习体验（2）-笔记","date":"2017-03-13T14:29:40.000Z","path":"2017/03/13/vue学习体验（2）-笔记/","text":"之前练习了一些从模型数据到视图的单向绑定，这次运用 v-model指令实现视图到模型的一个传递，依然结合jQuery的一些实现方法进行比较，加深自己的理解。代码部分：123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;02&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt; &lt;!--显示input输入的内容--&gt; &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;&lt;/div&gt;&lt;!--&lt;script type=&quot;text/javascript&quot; &gt; --&gt;&lt;!--//用jqury实现要达到的需求--&gt;&lt;!--//$(&apos;input&apos;).on(&apos;keydown&apos;,function (e) &#123; --&gt; &lt;!--//在jQuery中获取input元素--&gt; &lt;!--//其他获取方式 1、this 2、e.target --&gt;&lt;!--// console.log(e.target)--&gt; &lt;!--//获取Input的值 var val=e.target.value --&gt;&lt;!--// var val =$(this).val(); --&gt;&lt;!--// 或者 $(&apos;h1&apos;&apos;).html(val) --&gt;&lt;!--&#125;)--&gt;&lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;var app=new Vue(&#123; el:&apos;#app&apos;, data:&#123; msg:&apos;0922&apos; &#125;&#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 理解及总结： 开始练习了一些是模型数据通过vue的data属性实现数据到vue的一个绑定，此时数据更新会被vue监听渲染给视图，现在运用的v-model指令则是实现了视图到vue实例化对象的一个数据传递，假若视图更新，vue就会捕捉到，就会传递给模型数据。（v-model的属性值是一个js作用域，也就是一个js环境，在其中添加属性值就是添加Vue实例化对象的变量。有点绕口。。。。哈哈哈）","tags":[{"name":"vue","slug":"vue","permalink":"https:noodle-xia.github.io/blog/tags/vue/"},{"name":"前端框架","slug":"前端框架","permalink":"https:noodle-xia.github.io/blog/tags/前端框架/"}]},{"title":"vue初体验","date":"2017-03-09T12:29:35.000Z","path":"2017/03/09/vue初体验/","text":"简单的学习了一点Vue（mvvm模型），通过与原生js和jQuery写法相比较体验Vue的方便，条理清晰，不会使项目显得杂乱。实现数据到视图的双向绑定。 代码部分：123456789101112131415161718192021222324252627282930313233--- &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;01&lt;/title&gt; &lt;script src=&quot;jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;a&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var data =&#123; msg:&quot;你绝望了么？？&quot; &#125; data.msg=&quot;致胜一击 只要心够决！！&quot; // data.msg=&quot;致胜一击 只要心够决！！&quot; // document.getElementById(&quot;a&quot;).innerHTML=data.msg; //原生js写法。。 // document.getElementById(&quot;a&quot;).innerHTML=data.msg; // $(&quot;#a&quot;).html(data.msg).html(data.msg) //jQury写法。。 //创建vue实例化对象，（vm对象——绑定视图和数据..） new Vue(&#123; //绑定视图 el:&quot;#a&quot;, //绑定数据 data:data, &#125;) data.msg=&quot;致胜一击 只要心够决！！&quot; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;---","tags":[{"name":"vue","slug":"vue","permalink":"https:noodle-xia.github.io/blog/tags/vue/"},{"name":"前端框架","slug":"前端框架","permalink":"https:noodle-xia.github.io/blog/tags/前端框架/"}]},{"title":"个人博客","date":"2017-03-06T10:59:39.000Z","path":"2017/03/06/个人博客/","text":"个人博客更新日志 开头根据hexo＋github搭建，因为追求新鲜自己选用了三个主题，目前使用的是相对简洁 jackman,另外两个是Yilia 点击链接 、 yumemor 点击链接 ， 个人比较喜欢yumemor。开始搭建博客很顺利，在选用主题是花费了不少功夫，起初按照Jacman 这一主题一步步更新内容，修改样式，在主题themes文件中修改字体、文字及section的颜色、banner图片、微博秀等等。 注意:12cd themes/jacmangit pull origin master 是更新主题命令hexo g 是更新博客命令hexo new &quot;文件名&quot; 是新建文件名上传部署到github hexo deploy（或hexo d）搭建完成之后，这几个命令也是我经常使用的， 学习使用了很长时间git应用，有时间总结一下经常用的的git命令，以便使用。。。。 随笔经常不知道如何写文章，因为害怕写开头。。哈哈哈。。搭建博客，也是为了总结学过的知识，一方面可以提供交流，也因为总会忘，顺便巩固看过的东西，管理仓库，梳理技术。","tags":[{"name":"随笔","slug":"随笔","permalink":"https:noodle-xia.github.io/blog/tags/随笔/"}]}]